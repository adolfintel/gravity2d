/*
 * GNU LGPLv3
 */
package com.dosse.gravity2d.demo;

import com.dosse.gravity2d.Point;
import com.dosse.gravity2d.Settings;
import com.dosse.gravity2d.Simulation;
import com.dosse.gravity2d.Utils;

/**
 *
 * @author Federico
 */
public class BenchmarkGUI extends javax.swing.JFrame {

    private static final int LOW_SPS_THRESHOLD = Settings.SPS_LIMIT>=1?(int) (Settings.SPS_LIMIT/2):50,
            STOP_THRESHOLD = 50; //after 50 iterations in a row below LOW_SPS_THRESHOLD, the benchmark is over

    private static final int[] ratings = new int[]{
            350,
            500,
            900,
            1300,
            1600,
            2200,
            3000
    };
    private static final String[] ratingStrings = new String[]{
        "Piece of shit", //<200
        "Very disappointing", //200-400
        "Pretty bad", //400-800
        "Decent", //800-1200
        "Good", //1200-1600
        "Great", //1600-2200
        "Fantastic", //>2200-3000
        "What is this sorcery?" //>3000
    };

    private int stop = 0, score = 0;

    /**
     * Creates new form BenchmarkGUI
     */
    public BenchmarkGUI() {
        initComponents();
        Runtime.getRuntime().gc();
        new Thread() {
            @Override
            public void run() {
                rating.setText("");
                setPriority(MIN_PRIORITY);
                Simulation s = new Simulation() {
                    @Override
                    public void onStepComplete(long nanoSeconds) {
                        if (nanoSeconds >= (1000000000L / LOW_SPS_THRESHOLD)) {
                            stop++;
                        } else {
                            stop = 0;
                            add(new Point(Math.random() * Float.MAX_VALUE, Math.random() * Float.MAX_VALUE, Math.random() * 1000 - 500, Math.random() * 1000 - 500, Math.random() * 300 + 100, 0.5 + Math.random() * 8));
                            score++;
                        }
                    }
                };
                s.add(new Point(0, 0, 0, 0, 100, 1));
                s.add(new Point(500, 0, 0, 0, 50, 1));
                s.start();
                while (stop < STOP_THRESHOLD) {
                    Utils.sleep(10,0);
                    status.setText("" + score);
                }
                s.stopASAP = true;
                while (s.isAlive()) {
                    Utils.releaseCPU();
                }
                int rank = ratings.length;
                for (int i = 0; i < ratings.length; i++) {
                    if (score <= ratings[i]) {
                        rank = i;
                        break;
                    }
                }
                rating.setText(ratingStrings[rank]);
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        rating = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gravity Simulator - Benchmark");
        setResizable(false);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+10f));
        jLabel1.setText("Score");

        status.setFont(status.getFont().deriveFont(status.getFont().getStyle() | java.awt.Font.BOLD, status.getFont().getSize()+19));
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("Loading...");

        rating.setFont(rating.getFont().deriveFont(rating.getFont().getSize()+6f));
        rating.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rating.setText("Loading...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rating)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel rating;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
